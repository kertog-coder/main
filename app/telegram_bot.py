import asyncio
from pathlib import Path
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, FSInputFile, InlineKeyboardButton, \
    InlineKeyboardMarkup
from typing import Optional

from .config import config
from .funpay_client import FunPayClient


def build_menu() -> ReplyKeyboardMarkup:
	rows = [
		[KeyboardButton(text="‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç"), KeyboardButton(text="‚èπ –°—Ç–æ–ø")],
		[KeyboardButton(text="üí¨ –ü—Ä–µ—Å–µ—Ç—ã"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
		[KeyboardButton(text="üì¶ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã"), KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤")],
		[KeyboardButton(text="üîê –í–æ–π—Ç–∏ FunPay"), KeyboardButton(text="üîÅ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –í–∫–ª/–í—ã–∫–ª")],
		[KeyboardButton(text="üí¨ –ü—Ä—è–º–æ–π —á–∞—Ç –í–∫–ª/–í—ã–∫–ª"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")],
		[KeyboardButton(text="üîç –ê–Ω–∞–ª–∏–∑ –≤–∞–ª—é—Ç—ã"), KeyboardButton(text="üë§ –ê–Ω–∞–ª–∏–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")],
		[KeyboardButton(text="‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –í–∫–ª"), KeyboardButton(text="‚ùå –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –í—ã–∫–ª")],
		[KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞")],
	]
	return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)


def build_presets_menu() -> ReplyKeyboardMarkup:
	rows = [[KeyboardButton(text=p)] for p in config.preset_replies()[:10]]
	rows.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
	return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)


class Controller:
	def __init__(self, client: FunPayClient, admin_id_ref, bot: Bot) -> None:
		self.client = client
		self._admin_id_ref = admin_id_ref
		self._presets_mode = False
		self._direct_chat_mode = False
		self._selected_dialog = None  # node_id –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
		self._bot = bot  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
	
	async def send_screenshot_to_admin(self, screenshot_path: str, dialog_info: Optional[dict]) -> None:
		"""–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
		try:
			admin_id = self._admin_id_ref("get")
			if admin_id == 0:
				return
			
			# –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
			if dialog_info:
				caption = f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: {dialog_info.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
			else:
				caption = "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ FunPay"
			
			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
			photo = FSInputFile(screenshot_path)
			await self._bot.send_photo(chat_id=admin_id, photo=photo, caption=caption)
			print(f"[Telegram] –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
		except Exception as e:
			print(f"[Telegram] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")

	async def cmd_start(self, message: Message) -> None:
		admin_id = self._admin_id_ref("get")
		if admin_id == 0 and message.from_user:
			admin_id = message.from_user.id
			self._admin_id_ref("set", admin_id)
			await message.answer("–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
		await message.answer(
			"–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è FunPay –±–æ—Ç–æ–º:",
			reply_markup=build_menu(),
		)

	async def handle_buttons(self, message: Message) -> None:
		text = (message.text or "").strip()
		if text == "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç":
			await self.client.start()
			await message.answer("–ê–≤—Ç–æ–ø–æ—Å—Ç–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
		elif text == "‚èπ –°—Ç–æ–ø":
			await self.client.stop()
			await message.answer("–ê–≤—Ç–æ–ø–æ—Å—Ç–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
		elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
			bal = await self.client.fetch_balance()
			trade = await self.client.fetch_trade_totals()
			active = await self.client.fetch_active_orders(limit=10)
			parts = []
			if bal:
				parts.append(f"–ë–∞–ª–∞–Ω—Å: {bal}")
			if trade:
				parts.append(
					"–ê–∫—Ç–∏–≤–Ω—ã–µ/–∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–∞–∑—ã:"\
					f"\n‚Ä¢ –û–ø–ª–∞—á–µ–Ω–æ: {trade['paid_count']} –Ω–∞ {trade['paid_sum']} ‚ÇΩ"\
					f"\n‚Ä¢ –ó–∞–∫—Ä—ã—Ç–æ: {trade['closed_count']} –Ω–∞ {trade['closed_sum']} ‚ÇΩ"\
					f"\n‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç—ã: {trade['refund_count']} –Ω–∞ {trade['refund_sum']} ‚ÇΩ"\
					f"\n–ò—Ç–æ–≥–æ –ø–æ —Å–ø–∏—Å–∫—É: {trade['total_sum']} ‚ÇΩ"
				)
			if active:
				lines = ["\n–û—Ç–∫—Ä—ã—Ç—ã–µ (–û–ø–ª–∞—á–µ–Ω):"]
				for o in active:
					lines.append(f"‚Ä¢ {o['order_id']} | {o['buyer']} | {o['amount']} ‚ÇΩ | {o['status']}")
				parts.append("\n".join(lines))
			if not parts:
				parts.append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
			await message.answer("\n\n".join(parts))
		elif text == "üí¨ –ü—Ä–µ—Å–µ—Ç—ã":
			self._presets_mode = True
			await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç:", reply_markup=build_presets_menu())
		elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
			self._presets_mode = False
			self._selected_dialog = None
			await message.answer("–ú–µ–Ω—é:", reply_markup=build_menu())
		elif text == "üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤":
			dialogs = await self.client.get_unread_dialogs()
			if not dialogs:
				await message.answer("–ù–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤ –∏–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
				return
			msg = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥ (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä):\n\n"
			for i, d in enumerate(dialogs, 1):
				unread_mark = "üî¥" if d["unread"] else "‚ö™"
				msg += f"{i}. {unread_mark} {d['name']}\n"
			await message.answer(msg)
			self._selected_dialog = None  # –°–±—Ä–æ—Å–∏–º –≤—ã–±–æ—Ä
		elif text == "üì¶ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã":
			orders = await self.client.fetch_active_orders(limit=20)
			if not orders:
				await message.answer("–û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç")
				return
			lines = [f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–û–ø–ª–∞—á–µ–Ω): {len(orders)}"]
			for o in orders:
				amount_raw = o.get("amount")
				if isinstance(amount_raw, str) and ("‚ÇΩ" in amount_raw or "RUB" in amount_raw):
					amount = amount_raw
				elif amount_raw:
					amount = f"{amount_raw} ‚ÇΩ"
				else:
					amount = "‚Äî"
				buyer = o.get("buyer") or "‚Äî"
				order_id = o.get("order_id") or "‚Äî"
				lines.append(f"‚Ä¢ {buyer} ‚Äî {amount} ({order_id})")
			await message.answer("\n".join(lines))
		elif text == "‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å –≤ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π":
			sent = await self.client.reply_first_unread(config.auto_reply_text)
			await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if sent else "–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞")
		elif text == "üîÅ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –í–∫–ª/–í—ã–∫–ª":
			from .config import config as cfg
			cfg.auto_reply_enabled = not cfg.auto_reply_enabled
			await message.answer(f"–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç: {'–≤–∫–ª—é—á–µ–Ω' if cfg.auto_reply_enabled else '–≤—ã–∫–ª—é—á–µ–Ω'}")
		elif text == "üí¨ –ü—Ä—è–º–æ–π —á–∞—Ç –í–∫–ª/–í—ã–∫–ª":
			self._direct_chat_mode = not self._direct_chat_mode
			status = "–≤–∫–ª—é—á–µ–Ω ‚úÖ" if self._direct_chat_mode else "–≤—ã–∫–ª—é—á–µ–Ω ‚õî"
			target = ""
			if self._direct_chat_mode and self._selected_dialog:
				target = "\n\n–í—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–∏–∞–ª–æ–≥. –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–¥—É—Ç —Ç—É–¥–∞."
			elif self._direct_chat_mode:
				target = "\n\n–î–∏–∞–ª–æ–≥ –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî —Å–æ–æ–±—â–µ–Ω–∏—è –∏–¥—É—Ç –≤ –ø–µ—Ä–≤—ã–π –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π."
			await message.answer(f"–ü—Ä—è–º–æ–π —á–∞—Ç: {status}{target}")
		elif text == "‚ùì –ü–æ–º–æ—â—å":
			await self.cmd_help(message)
		elif text == "üîç –ê–Ω–∞–ª–∏–∑ –≤–∞–ª—é—Ç—ã":
			await self.cmd_analyze_currency(message)
		elif text == "üë§ –ê–Ω–∞–ª–∏–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤":
			await self.cmd_analyze_accounts(message)
		elif text == "‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –í–∫–ª":
			await self.cmd_auto_on(message)
		elif text == "‚ùå –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –í—ã–∫–ª":
			await self.cmd_auto_off(message)
		elif text == "üìä –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞":
			await self.cmd_auto_status(message)
		elif text == "üîê –í–æ–π—Ç–∏ FunPay":
			creds = self.client.load_saved_credentials()
			if not creds:
				await message.answer(
					"–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å:\n/fp_set –≤–∞—à_–ª–æ–≥–∏–Ω –≤–∞—à_–ø–∞—Ä–æ–ª—å\n\n"
					"–ò–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ cookie:\n/fp_cookie COOKIE_–°–¢–†–û–ö–ê\n\n"
					"–õ–∏–±–æ –æ—Ç–∫—Ä–æ–π –æ–∫–Ω–æ –ª–æ–≥–∏–Ω–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞: /fp_cookiebp"
				)
				return
			success = await self.client.login_with_credentials(creds.get("login", ""), creds.get("password", ""))
			await message.answer("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω ‚úÖ" if success else "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ ‚ùå\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ /fp_set –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /fp_cookie")
		else:
			if self._presets_mode and text:
				from .config import config as cfg
				cfg.auto_reply_text = text
				await message.answer("–¢–µ–∫—Å—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω. –ù–∞–∂–º–∏—Ç–µ '‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å –≤ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
			elif self._direct_chat_mode and text:
				# –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –¥–∏–∞–ª–æ–≥, –ø–∏—à–µ–º –≤ –Ω–µ–≥–æ, –∏–Ω–∞—á–µ –≤ –ø–µ—Ä–≤—ã–π –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π
				if self._selected_dialog:
					sent = await self.client.reply_to_dialog(self._selected_dialog, text)
				else:
					sent = await self.client.reply_first_unread(text)
				await message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if sent else "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
			elif text and text.isdigit():
				# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –Ω–æ–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞
				dialogs = await self.client.get_unread_dialogs()
				idx = int(text) - 1
				if 0 <= idx < len(dialogs):
					self._selected_dialog = dialogs[idx]["node_id"]
					await message.answer(f"–í—ã–±—Ä–∞–Ω –¥–∏–∞–ª–æ–≥: {dialogs[idx]['name']}\n\n–í–∫–ª—é—á–∏—Ç–µ '–ü—Ä—è–º–æ–π —á–∞—Ç' –∏ –ø–∏—à–∏—Ç–µ ‚Äî –≤—Å—ë –ø–æ–π–¥—ë—Ç –≤ —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥.")
				else:
					await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞")

	async def cmd_text(self, message: Message) -> None:
		parts = (message.text or "").split(maxsplit=1)
		if len(parts) < 2:
			await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /text –≤–∞—à_—Ç–µ–∫—Å—Ç")
			return
		self.client.set_post_text(parts[1])
		await message.answer("–¢–µ–∫—Å—Ç –∞–≤—Ç–æ–ø–æ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω.")

	async def cmd_interval(self, message: Message) -> None:
		parts = (message.text or "").split(maxsplit=1)
		if len(parts) < 2:
			await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /interval –º–∏–Ω—É—Ç—ã")
			return
		try:
			minutes = int(parts[1])
		except ValueError:
			await message.answer("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.")
			return
		self.client.set_interval_minutes(minutes)
		await message.answer(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª—ë–Ω: {minutes} –º–∏–Ω.")

	async def cmd_services_interval(self, message: Message) -> None:
		"""–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —É—Å–ª—É–≥–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
		parts = (message.text or "").split(maxsplit=1)
		if len(parts) < 2:
			await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /services_interval [—Å–µ–∫—É–Ω–¥—ã]")
			return
		try:
			seconds = int(parts[1])
			if seconds < 5:
				await message.answer("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 5 —Å–µ–∫—É–Ω–¥")
				return
			
			from .config import config
			config.services_interval = seconds
			await message.answer(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å–ª—É–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {seconds} —Å–µ–∫—É–Ω–¥")
		except ValueError:
			await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")

	async def cmd_fp_set(self, message: Message) -> None:
		parts = (message.text or "").split(maxsplit=2)
		if len(parts) < 3:
			await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /fp_set –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å\n(–ª–æ–≥–∏–Ω ‚Äî —ç—Ç–æ username, –Ω–µ email)")
			return
		login, password = parts[1], parts[2]
		from json import dumps
		from pathlib import Path
		Path("storage").mkdir(parents=True, exist_ok=True)
		Path("storage/credentials.json").write_text(dumps({"login": login, "password": password}), encoding="utf-8")
		await message.answer("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ 'üîê –í–æ–π—Ç–∏ FunPay' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /fp_login.")

	async def cmd_fp_login(self, message: Message) -> None:
		parts = (message.text or "").split(maxsplit=2)
		if len(parts) < 3:
			await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /fp_login –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å\n(–ª–æ–≥–∏–Ω ‚Äî —ç—Ç–æ username, –Ω–µ email)")
			return
		success = await self.client.login_with_credentials(parts[1], parts[2])
		await message.answer("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω ‚úÖ" if success else "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ ‚ùå")

	async def cmd_fp_cookie(self, message: Message) -> None:
		parts = (message.text or "").split(maxsplit=1)
		if len(parts) < 2:
			await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /fp_cookie cookie_header (—Å—Ç—Ä–æ–∫–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Cookie)")
			return
		success = await self.client.login_with_cookie_header(parts[1])
		await message.answer("Cookies –ø—Ä–∏–º–µ–Ω–µ–Ω—ã" if success else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å cookies")

	async def cmd_text_scchat(self, message: Message) -> None:
		"""–ü–æ–∫–∞–∑–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤"""
		await message.answer("–î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤...")
		try:
			screenshots = await self.client.get_chat_screenshots()
			if screenshots:
				await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —á–∞—Ç–æ–≤...")
				for i, screenshot_path in enumerate(screenshots, 1):
					try:
						photo = FSInputFile(screenshot_path)
						await message.answer_photo(
							photo=photo, 
							caption=f"–ß–∞—Ç {i}: {screenshot_path.split('/')[-1]}"
						)
					except Exception as e:
						await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ {i}: {e}")
				await message.answer("‚úÖ –í—Å–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —á–∞—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
			else:
				await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —á–∞—Ç–æ–≤")
		except Exception as e:
			await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

	async def cmd_test_sc(self, message: Message) -> None:
		"""–ü–æ–∫–∞–∑–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç —É—Å–ª—É–≥"""
		await message.answer("–î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç —É—Å–ª—É–≥...")
		try:
			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
			screenshots = await self.client.send_message_with_screenshot()
			if screenshots:
				await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–∞...")
				for i, screenshot_path in enumerate(screenshots, 1):
					try:
						photo = FSInputFile(screenshot_path)
						await message.answer_photo(
							photo=photo, 
							caption=f"–°–∫—Ä–∏–Ω—à–æ—Ç {i}/5: {screenshot_path.split('/')[-1]}"
						)
					except Exception as e:
						await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ {i}: {e}")
				await message.answer("‚úÖ –í—Å–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
			else:
				await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤")
		except Exception as e:
			await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

	async def cmd_auto_test(self, message: Message) -> None:
		"""–¢–µ—Å—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–µ—Ä–≤—ã–π –¥–∏–∞–ª–æ–≥"""
		await message.answer("–¢–µ—Å—Ç–∏—Ä—É—é –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç...")
		try:
			success = await self.client.test_auto_reply()
			if success:
				await message.answer("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
			else:
				await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç")
		except Exception as e:
			await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

	async def cmd_auto_force(self, message: Message) -> None:
		"""–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –≤ –ª—é–±–æ–π –¥–∏–∞–ª–æ–≥"""
		await message.answer("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç...")
		try:
			# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤
			dialogs = await self.client.get_unread_dialogs()
			if not dialogs:
				await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤")
				return
			
			# –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –¥–∏–∞–ª–æ–≥
			dialog = dialogs[0]
			await message.answer(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –≤ –¥–∏–∞–ª–æ–≥: {dialog['name']}")
			
			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç
			success = await self.client.test_auto_reply()
			if success:
				await message.answer("‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
			else:
				await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç")
		except Exception as e:
			await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

	async def cmd_auto_restart(self, message: Message) -> None:
		"""–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç"""
		await message.answer("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç...")
		try:
			# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
			await self.client.stop()
			await asyncio.sleep(2)
			
			# –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
			await self.client.start()
			await message.answer("‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!")
		except Exception as e:
			await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

	async def cmd_auto_clear(self, message: Message) -> None:
		"""–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""
		await message.answer("–û—á–∏—â–∞—é —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤...")
		try:
			import time
			current_time = time.time()
			# –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—ã–µ –¥–∏–∞–ª–æ–≥–∏ (—Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
			old_dialogs = []
			for dialog_id, timestamp in self.client._processed_dialogs.items():
				if isinstance(timestamp, (int, float)) and current_time - timestamp > 300:  # 5 –º–∏–Ω—É—Ç
					old_dialogs.append(dialog_id)
			
			for dialog_id in old_dialogs:
				del self.client._processed_dialogs[dialog_id]
			
			# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
			self.client._save_processed_dialogs()
			
			await message.answer(f"‚úÖ –û—á–∏—â–µ–Ω–æ {len(old_dialogs)} —Å—Ç–∞—Ä—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤!")
		except Exception as e:
			await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

	async def cmd_auto_clear_all(self, message: Message) -> None:
		"""–û—á–∏—Å—Ç–∏—Ç—å –í–°–ï –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏"""
		await message.answer("–û—á–∏—â–∞—é –í–°–ï –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏...")
		try:
			self.client._processed_dialogs.clear()
			# –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –¥–∏–∞–ª–æ–≥–∞–º–∏
			import os
			if os.path.exists(self.client._processed_dialogs_file):
				os.remove(self.client._processed_dialogs_file)
			await message.answer("‚úÖ –í–°–ï –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã!")
		except Exception as e:
			await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

	async def cmd_auto_stop(self, message: Message) -> None:
		"""–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞"""
		await message.answer("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –ê–í–¢–û–û–¢–í–ï–¢–ê!")
		try:
			# –í—ã–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç
			from .config import config
			config.auto_reply_enabled = False
			
			# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
			await self.client.stop()
			
			# –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
			self.client._processed_dialogs.clear()
			
			await message.answer("‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –æ—á–∏—â–µ–Ω!")
		except Exception as e:
			await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

	async def cmd_analyze_currency(self, message: Message) -> None:
		"""–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω –Ω–∞ –≤–∞–ª—é—Ç—É Minecraft"""
		await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ü–µ–Ω—ã –Ω–∞ –≤–∞–ª—é—Ç—É Minecraft...")
		try:
			result = await self.client.analyze_currency_prices()
			if result:
				await message.answer(result)
			else:
				await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö")
		except Exception as e:
			await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–Ω: {e}")

	async def cmd_analyze_accounts(self, message: Message) -> None:
		"""–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
		keyboard = InlineKeyboardMarkup(inline_keyboard=[
			[InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="analyze_buy")],
			[InlineKeyboardButton(text="üí∞ –ü—Ä–æ–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="analyze_sell")]
		])
		
		await message.answer("üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**", reply_markup=keyboard)

	async def handle_analyze_buy(self, callback_query) -> None:
		"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–∫—É–ø–∫–∏"""
		await callback_query.answer()
		
		keyboard = InlineKeyboardMarkup(inline_keyboard=[
			[InlineKeyboardButton(text="üëë –ì–µ—Ä—Ü–æ–≥ –Ω–∞–≤—Å–µ–≥–¥–∞", callback_data="b_–≥")],
			[InlineKeyboardButton(text="üëë –ö–Ω—è–∑—å –Ω–∞–≤—Å–µ–≥–¥–∞", callback_data="b_–∫")],
			[InlineKeyboardButton(text="üëë –ì–ª–∞–≤–∞", callback_data="b_–≥–ª")],
			[InlineKeyboardButton(text="üëë –¢–∏—Ç–∞–Ω", callback_data="b_—Ç")],
			[InlineKeyboardButton(text="üëë –≠–ª–∏—Ç–∞", callback_data="b_—ç")],
			[InlineKeyboardButton(text="üëë –ü—Ä–∏–Ω—Ü", callback_data="b_–ø")]
		])
		
		await callback_query.message.edit_text("üõí **–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–Ω–∞—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:**", reply_markup=keyboard)

	async def handle_analyze_sell(self, callback_query) -> None:
		"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥–∞–∂–∏"""
		await callback_query.answer()
		
		keyboard = InlineKeyboardMarkup(inline_keyboard=[
			[InlineKeyboardButton(text="üëë –ì–µ—Ä—Ü–æ–≥ –Ω–∞–≤—Å–µ–≥–¥–∞", callback_data="s_–≥")],
			[InlineKeyboardButton(text="üëë –ö–Ω—è–∑—å –Ω–∞–≤—Å–µ–≥–¥–∞", callback_data="s_–∫")],
			[InlineKeyboardButton(text="üëë –ì–ª–∞–≤–∞", callback_data="s_–≥–ª")],
			[InlineKeyboardButton(text="üëë –¢–∏—Ç–∞–Ω", callback_data="s_—Ç")],
			[InlineKeyboardButton(text="üëë –≠–ª–∏—Ç–∞", callback_data="s_—ç")],
			[InlineKeyboardButton(text="üëë –ü—Ä–∏–Ω—Ü", callback_data="s_–ø")]
		])
		
		await callback_query.message.edit_text("üí∞ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–Ω–∞—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:**", reply_markup=keyboard)

	async def handle_buy_donate(self, callback_query) -> None:
		"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–Ω–∞—Ç–∞"""
		await callback_query.answer()
		
		# –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: b_–∫
		donate_code = callback_query.data.split("_")[1]
		
		donate_map = {
			"–≥": "–≥–µ—Ä—Ü–æ–≥",
			"–∫": "–∫–Ω—è–∑—å", 
			"–≥–ª": "–≥–ª–∞–≤–∞",
			"—Ç": "—Ç–∏—Ç–∞–Ω",
			"—ç": "—ç–ª–∏—Ç–∞",
			"–ø": "–ø—Ä–∏–Ω—Ü"
		}
		donate_name = donate_map.get(donate_code, "–∫–Ω—è–∑—å")
		
		donate_display = {
			"–≥–µ—Ä—Ü–æ–≥": "–ì–µ—Ä—Ü–æ–≥ –Ω–∞–≤—Å–µ–≥–¥–∞",
			"–∫–Ω—è–∑—å": "–ö–Ω—è–∑—å –Ω–∞–≤—Å–µ–≥–¥–∞", 
			"–≥–ª–∞–≤–∞": "–ì–ª–∞–≤–∞",
			"—Ç–∏—Ç–∞–Ω": "–¢–∏—Ç–∞–Ω",
			"—ç–ª–∏—Ç–∞": "–≠–ª–∏—Ç–∞",
			"–ø—Ä–∏–Ω—Ü": "–ü—Ä–∏–Ω—Ü"
		}
		
		display_name = donate_display.get(donate_name, donate_name)
		
		# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–∏–≤—è–∑–∫–∏
		keyboard = InlineKeyboardMarkup(inline_keyboard=[
			[InlineKeyboardButton(text="üîó –° –ø—Ä–∏–≤—è–∑–∫–æ–π", callback_data=f"bt_{donate_name}_w")],
			[InlineKeyboardButton(text="üîì –ë–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏", callback_data=f"bt_{donate_name}_wo")],
			[InlineKeyboardButton(text="‚ùì –£—Ç–µ—Ä—è–Ω–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞", callback_data=f"bt_{donate_name}_l")],
			[InlineKeyboardButton(text="üîÑ –õ—é–±–æ–π —Ç–∏–ø", callback_data=f"bt_{donate_name}_a")]
		])
		
		await callback_query.message.edit_text(f"üõí **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è {display_name}:**", reply_markup=keyboard)

	async def handle_buy_type(self, callback_query) -> None:
		"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
		await callback_query.answer()
		
		# –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: bt_–∫–Ω—è–∑—å_w
		parts = callback_query.data.split("_")
		donate_name = parts[1]
		binding_code = parts[2]
		
		# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–¥ –≤ —Ç–∏–ø
		binding_map = {
			"w": "with",
			"wo": "without", 
			"l": "lost",
			"a": "any"
		}
		binding_type = binding_map.get(binding_code, "any")
		
		donate_display = {
			"–≥–µ—Ä—Ü–æ–≥": "–ì–µ—Ä—Ü–æ–≥ –Ω–∞–≤—Å–µ–≥–¥–∞",
			"–∫–Ω—è–∑—å": "–ö–Ω—è–∑—å –Ω–∞–≤—Å–µ–≥–¥–∞", 
			"–≥–ª–∞–≤–∞": "–ì–ª–∞–≤–∞",
			"—Ç–∏—Ç–∞–Ω": "–¢–∏—Ç–∞–Ω",
			"—ç–ª–∏—Ç–∞": "–≠–ª–∏—Ç–∞",
			"–ø—Ä–∏–Ω—Ü": "–ü—Ä–∏–Ω—Ü"
		}
		
		binding_display = {
			"with": "—Å –ø—Ä–∏–≤—è–∑–∫–æ–π",
			"without": "–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏", 
			"lost": "—Å —É—Ç–µ—Ä—è–Ω–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–æ–π",
			"any": "–ª—é–±–æ–≥–æ —Ç–∏–ø–∞"
		}
		
		display_name = donate_display.get(donate_name, donate_name)
		binding_name = binding_display.get(binding_type, binding_type)
		
		await callback_query.message.edit_text(f"üõí –ò—â—É —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç **{display_name}** {binding_name}...")
		
		try:
			result = await self.client.find_cheapest_account_with_binding(donate_name, binding_type)
			if result:
				await callback_query.message.edit_text(result)
			else:
				await callback_query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
		except Exception as e:
			await callback_query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

	async def handle_sell_donate(self, callback_query) -> None:
		"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–Ω–∞—Ç–∞"""
		await callback_query.answer()
		
		# –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: s_–∫
		donate_code = callback_query.data.split("_")[1]
		
		donate_map = {
			"–≥": "–≥–µ—Ä—Ü–æ–≥",
			"–∫": "–∫–Ω—è–∑—å", 
			"–≥–ª": "–≥–ª–∞–≤–∞",
			"—Ç": "—Ç–∏—Ç–∞–Ω",
			"—ç": "—ç–ª–∏—Ç–∞",
			"–ø": "–ø—Ä–∏–Ω—Ü"
		}
		donate_name = donate_map.get(donate_code, "–∫–Ω—è–∑—å")
		
		donate_display = {
			"–≥–µ—Ä—Ü–æ–≥": "–ì–µ—Ä—Ü–æ–≥ –Ω–∞–≤—Å–µ–≥–¥–∞",
			"–∫–Ω—è–∑—å": "–ö–Ω—è–∑—å –Ω–∞–≤—Å–µ–≥–¥–∞", 
			"–≥–ª–∞–≤–∞": "–ì–ª–∞–≤–∞",
			"—Ç–∏—Ç–∞–Ω": "–¢–∏—Ç–∞–Ω",
			"—ç–ª–∏—Ç–∞": "–≠–ª–∏—Ç–∞",
			"–ø—Ä–∏–Ω—Ü": "–ü—Ä–∏–Ω—Ü"
		}
		
		display_name = donate_display.get(donate_name, donate_name)
		await callback_query.message.edit_text(f"üí∞ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ü–µ–Ω—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ **{display_name}**...")
		
		try:
			result = await self.client.analyze_sell_price(donate_name)
			if result:
				await callback_query.message.edit_text(result)
			else:
				await callback_query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")
		except Exception as e:
			await callback_query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

	async def cmd_analyze_lot(self, message: Message) -> None:
		"""–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ"""
		# –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
		text = message.text or ""
		url = text.replace("/analyze_lot", "").strip()
		
		if not url:
			await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ª–æ—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n/analyze_lot https://funpay.com/lot/12345/")
			return
		
		if "funpay.com" not in url:
			await message.answer("‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å FunPay")
			return
		
		await message.answer(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ª–æ—Ç: {url}")
		
		try:
			result = await self.client.analyze_lot_details(url)
			if result:
				await message.answer(result)
			else:
				await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ—Ç")
		except Exception as e:
			await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

	async def handle_donate_callback(self, callback_query) -> None:
		"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–Ω–∞—Ç–∞"""
		await callback_query.answer()
		
		donate_name = callback_query.data.replace("donate_", "")
		donate_display = {
			"–≥–µ—Ä—Ü–æ–≥": "–ì–µ—Ä—Ü–æ–≥ –Ω–∞–≤—Å–µ–≥–¥–∞",
			"–∫–Ω—è–∑—å": "–ö–Ω—è–∑—å –Ω–∞–≤—Å–µ–≥–¥–∞", 
			"–≥–ª–∞–≤–∞": "–ì–ª–∞–≤–∞",
			"—Ç–∏—Ç–∞–Ω": "–¢–∏—Ç–∞–Ω",
			"—ç–ª–∏—Ç–∞": "–≠–ª–∏—Ç–∞",
			"–ø—Ä–∏–Ω—Ü": "–ü—Ä–∏–Ω—Ü"
		}
		
		display_name = donate_display.get(donate_name, donate_name)
		await callback_query.message.edit_text(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ü–µ–Ω—ã –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç—ã —Å –¥–æ–Ω–∞—Ç–æ–º **{display_name}**...")
		
		try:
			result = await self.client.analyze_account_prices(donate_name)
			if result:
				await callback_query.message.edit_text(result)
			else:
				await callback_query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö")
		except Exception as e:
			await callback_query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–Ω: {e}")

	async def cmd_test(self, message: Message) -> None:
		"""–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å Groq (Llama)"""
		await message.answer("ü§ñ –¢–µ—Å—Ç–∏—Ä—É—é Groq (Llama)...")
		try:
			import requests
			
			# Groq API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
			api_key = "gsk_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"  # –ù—É–∂–µ–Ω –∫–ª—é—á –æ—Ç Groq
			url = "https://api.groq.com/openai/v1/chat/completions"
			
			# –ó–∞–≥–æ–ª–æ–≤–∫–∏
			headers = {
				"Content-Type": "application/json",
				"Authorization": f"Bearer {api_key}"
			}
			
			# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
			data = {
				"model": "llama-3.1-8b-instant",
				"messages": [
					{"role": "system", "content": "You are a helpful assistant."},
					{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç API –∫–ª—é—á–∞. –û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ."}
				],
				"max_tokens": 100,
				"temperature": 0.7
			}
			
			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
			response = requests.post(url, headers=headers, json=data)
			result = response.json()
			
			if 'choices' in result and len(result['choices']) > 0:
				answer = result['choices'][0]['message']['content']
				await message.answer(f"‚úÖ Groq (Llama) –æ—Ç–≤–µ—á–∞–µ—Ç: {answer}")
			else:
				await message.answer(f"‚ùå –û—à–∏–±–∫–∞ API: {result}")
			
		except Exception as e:
			await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")


	async def cmd_auto_on(self, message: Message) -> None:
		"""–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç"""
		from .config import config
		config.auto_reply_enabled = True
		await message.answer("‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –≤–∫–ª—é—á—ë–Ω!")

	async def cmd_auto_off(self, message: Message) -> None:
		"""–í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç"""
		from .config import config
		config.auto_reply_enabled = False
		await message.answer("‚ùå –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω!")

	async def cmd_auto_status(self, message: Message) -> None:
		"""–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞"""
		from .config import config
		status = "–≤–∫–ª—é—á—ë–Ω ‚úÖ" if config.auto_reply_enabled else "–≤—ã–∫–ª—é—á–µ–Ω ‚ùå"
		text = config.auto_reply_text[:50] + "..." if len(config.auto_reply_text) > 50 else config.auto_reply_text
		running = "—Ä–∞–±–æ—Ç–∞–µ—Ç üü¢" if self.client.running else "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω üî¥"
		await message.answer(f"–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç: {status}\n–ë–æ—Ç: {running}\n–¢–µ–∫—Å—Ç: {text}")

	async def cmd_help(self, message: Message) -> None:
		"""–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"""
		help_text = """
ü§ñ **–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ FunPay –±–æ—Ç–∞:**

**üìä –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥

**üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
/balance - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å FunPay
/orders - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
/totals - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤

**‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
/text [—Ç–µ–∫—Å—Ç] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞
/interval [–º–∏–Ω—É—Ç—ã] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞
/services_interval [—Å–µ–∫—É–Ω–¥—ã] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —É—Å–ª—É–≥–∏

**üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è FunPay:**
/fp_set [–ª–æ–≥–∏–Ω] [–ø–∞—Ä–æ–ª—å] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å
/fp_login - –í–æ–π—Ç–∏ –≤ FunPay —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
/fp_cookie [cookie] - –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ cookie
/fp_cookiebp - –û—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
/fp_reset - –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏ FunPay

**üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã:**
/text_scchat - –°–∫—Ä–∏–Ω—à–æ—Ç—ã —á–∞—Ç–æ–≤
/test_sc - –°–∫—Ä–∏–Ω—à–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —É—Å–ª—É–≥–∞—Ö
/auto_test - –¢–µ—Å—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞

**üîÑ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç:**
/auto_on - –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç
/auto_off - –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç
/auto_status - –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞
/auto_force - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç
/auto_restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç
/auto_clear - –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∏–∞–ª–æ–≥–∏ (—Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω)
/auto_clear_all - –û—á–∏—Å—Ç–∏—Ç—å –í–°–ï –¥–∏–∞–ª–æ–≥–∏
/auto_stop - üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê

**üîç –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω:**
/analyze_currency - –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω –Ω–∞ –≤–∞–ª—é—Ç—É Minecraft
/analyze_accounts - –ê–Ω–∞–ª–∏–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞)
/analyze_lot - –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ

**ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**
/test - –¢–µ—Å—Ç Groq (Llama) - –Ω—É–∂–µ–Ω API –∫–ª—é—á

**üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:**
- –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
- –í —É—Å–ª—É–≥–∞—Ö –±–æ—Ç –ø–∏—à–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
- –ù–∞–∂–º–∏ "–°—Ç–∞—Ä—Ç" –æ–¥–∏–Ω —Ä–∞–∑ - –±–æ—Ç –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å –≤ —É—Å–ª—É–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
- –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
		"""
		await message.answer(help_text)


async def run_telegram(client: FunPayClient) -> None:
	if not config.telegram_bot_token:
		print("[TG] TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω ‚Äî Telegram-–±–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω")
		return

	storage_dir = Path("storage")
	storage_dir.mkdir(parents=True, exist_ok=True)
	admin_file = storage_dir / "admin_id.txt"

	admin_id = config.telegram_admin_id
	if admin_id == 0 and admin_file.exists():
		try:
			admin_id = int(admin_file.read_text(encoding="utf-8").strip() or "0")
		except Exception:
			admin_id = 0

	def admin_id_ref(action: str, value: Optional[int] = None):
		nonlocal admin_id
		if action == "get":
			return admin_id
		if action == "set" and value is not None:
			admin_id = int(value)
			try:
				admin_file.write_text(str(admin_id), encoding="utf-8")
			except Exception:
				pass
			return admin_id
		return admin_id

	bot = Bot(token=config.telegram_bot_token)
	dp = Dispatcher()
	controller = Controller(client, admin_id_ref, bot)
	
	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
	client.set_screenshot_callback(controller.send_screenshot_to_admin)

	def only_admin(handler):
		async def wrapper(message: Message, *args, **kwargs):
			current_admin = admin_id_ref("get")
			if current_admin == 0 and message.text and message.text.startswith("/start"):
				return await handler(message)
			if message.from_user and message.from_user.id == current_admin:
				return await handler(message)
			await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
		return wrapper

	# –ö–æ–º–∞–Ω–¥—ã —Å–Ω–∞—á–∞–ª–∞
	dp.message.register(only_admin(controller.cmd_start), Command("start"))
	dp.message.register(only_admin(controller.cmd_help), Command("help"))
	dp.message.register(only_admin(controller.cmd_text), Command("text"))
	dp.message.register(only_admin(controller.cmd_interval), Command("interval"))
	dp.message.register(only_admin(controller.cmd_services_interval), Command("services_interval"))
	dp.message.register(only_admin(controller.cmd_fp_set), Command("fp_set"))
	dp.message.register(only_admin(controller.cmd_fp_login), Command("fp_login"))
	dp.message.register(only_admin(controller.cmd_fp_cookie), Command("fp_cookie"))
	dp.message.register(only_admin(controller.cmd_text_scchat), Command("text_scchat"))
	dp.message.register(only_admin(controller.cmd_test_sc), Command("test_sc"))
	dp.message.register(only_admin(controller.cmd_auto_test), Command("auto_test"))
	dp.message.register(only_admin(controller.cmd_auto_force), Command("auto_force"))
	dp.message.register(only_admin(controller.cmd_auto_restart), Command("auto_restart"))
	dp.message.register(only_admin(controller.cmd_auto_clear), Command("auto_clear"))
	dp.message.register(only_admin(controller.cmd_auto_clear_all), Command("auto_clear_all"))
	dp.message.register(only_admin(controller.cmd_auto_stop), Command("auto_stop"))
	dp.message.register(only_admin(controller.cmd_auto_on), Command("auto_on"))
	dp.message.register(only_admin(controller.cmd_auto_off), Command("auto_off"))
	dp.message.register(only_admin(controller.cmd_auto_status), Command("auto_status"))
	dp.message.register(only_admin(controller.cmd_analyze_currency), Command("analyze_currency"))
	dp.message.register(only_admin(controller.cmd_analyze_accounts), Command("analyze_accounts"))
	dp.message.register(only_admin(controller.cmd_analyze_lot), Command("analyze_lot"))
	dp.message.register(only_admin(controller.cmd_test), Command("test"))
	
	# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∞–Ω–∞–ª–∏–∑–∞
	@dp.callback_query(lambda c: c.data == "analyze_buy")
	async def handle_analyze_buy(callback_query):
		await controller.handle_analyze_buy(callback_query)

	@dp.callback_query(lambda c: c.data == "analyze_sell")
	async def handle_analyze_sell(callback_query):
		await controller.handle_analyze_sell(callback_query)

	@dp.callback_query(lambda c: c.data.startswith("b_"))
	async def handle_buy_donate(callback_query):
		await controller.handle_buy_donate(callback_query)

	@dp.callback_query(lambda c: c.data.startswith("s_"))
	async def handle_sell_donate(callback_query):
		await controller.handle_sell_donate(callback_query)

	@dp.callback_query(lambda c: c.data.startswith("bt_"))
	async def handle_buy_type(callback_query):
		await controller.handle_buy_type(callback_query)

	# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–æ–Ω–∞—Ç–æ–≤ (—Å—Ç–∞—Ä—ã–π)
	@dp.callback_query(lambda c: c.data.startswith("donate_"))
	async def handle_donate_callback(callback_query):
		await controller.handle_donate_callback(callback_query)

	@dp.message(Command("fp_cookiebp"))
	async def _cmd_fp_cookiebp(message: Message):
		current_admin = admin_id_ref("get")
		if not message.from_user or message.from_user.id != current_admin:
			return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
		await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞...")
		success = await client.open_login_browser()
		if success:
			await message.answer("–û–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ. –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å, —Ä–µ—à–∏—Ç–µ –∫–∞–ø—á—É –∏ –Ω–∞–∂–º–∏—Ç–µ –í–æ–π—Ç–∏. –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é –±–æ—Ç–∞.")
		else:
			await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –≤—Ö–æ–¥–∞.")

	@dp.message(Command("fp_reset"))
	async def _cmd_fp_reset(message: Message):
		current_admin = admin_id_ref("get")
		if not message.from_user or message.from_user.id != current_admin:
			return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
		await message.answer("–°–±—Ä–∞—Å—ã–≤–∞—é —Å–µ—Å—Å–∏—é...")
		success = await client.reset_session()
		if success:
			await message.answer("–°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞: –∫–Ω–æ–ø–∫–∞ 'üîê –í–æ–π—Ç–∏ FunPay' –¥–ª—è –Ω–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
		else:
			await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Å–µ—Å—Å–∏—é.")
	# –ü–æ—Ç–æ–º –∫–Ω–æ–ø–∫–∏/—Ç–µ–∫—Å—Ç
	dp.message.register(only_admin(controller.handle_buttons), F.text & ~F.text.startswith("/"))

	try:
		await bot.delete_webhook(drop_pending_updates=True)
	except Exception:
		pass

	await dp.start_polling(bot)
